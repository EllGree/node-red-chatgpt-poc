[
    {
        "id": "3528abd37031dabe",
        "type": "tab",
        "label": "Main Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3e266a338db4a3bd",
        "type": "group",
        "z": "3528abd37031dabe",
        "name": "Input Enrichment Group",
        "style": {
            "stroke": "#bfdbef",
            "fill": "#ffffff",
            "label": true
        },
        "nodes": [
            "aef32bf013bf4cb1",
            "65efc2c706921399",
            "f8e936c96b175f20",
            "382027805d06f27f",
            "5840f84bf46885cd"
        ],
        "x": 474,
        "y": 379,
        "w": 812,
        "h": 82
    },
    {
        "id": "fa6f09aee615fd3b",
        "type": "group",
        "z": "3528abd37031dabe",
        "name": "OpenAI Group",
        "style": {
            "stroke": "#bfdbef",
            "fill": "#ffffff",
            "label": true
        },
        "nodes": [
            "a505f83094ce3c39",
            "10c99a8b606998da",
            "0cec7430cfd01dd9"
        ],
        "x": 714,
        "y": 219,
        "w": 572,
        "h": 82
    },
    {
        "id": "dc31dea15625e354",
        "type": "group",
        "z": "3528abd37031dabe",
        "name": "Refresh configs every hour",
        "style": {
            "stroke": "#bfdbef",
            "fill": "#ffffff",
            "label": true
        },
        "nodes": [
            "98aa88a133dc42a6",
            "de6b8359132db89f",
            "2bb18d73461d5ca0"
        ],
        "x": 34,
        "y": 39,
        "w": 532,
        "h": 82
    },
    {
        "id": "84112de77a7d8a12",
        "type": "http in",
        "z": "3528abd37031dabe",
        "name": "POST /message",
        "url": "/message",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 100,
        "y": 220,
        "wires": [
            [
                "3b75e51efa374e0d"
            ]
        ]
    },
    {
        "id": "3b75e51efa374e0d",
        "type": "json",
        "z": "3528abd37031dabe",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 250,
        "y": 220,
        "wires": [
            [
                "1ccc025305d0fcfe"
            ]
        ]
    },
    {
        "id": "1ccc025305d0fcfe",
        "type": "function",
        "z": "3528abd37031dabe",
        "name": "Get URLs",
        "func": "\nif (msg.req && msg.req.body && msg.req.body.message) {\n  msg.originalMessage = msg.req.body.message;\n  msg.url = Array.from(msg.originalMessage.match(/(https?:\\/\\/[^\\s]+)/g));\n  node.status({ fill: \"green\", shape: \"dot\", text: `${msg.originalMessage.length} chars, ${msg.url.length} links`});\n} else {\n  const text = \"Empty request received\";\n  node.status({ fill: \"red\", shape: \"dot\", text });\n  node.error(text, msg);\n  return null; // Stop\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 220,
        "wires": [
            [
                "6a75df7eed810537"
            ]
        ]
    },
    {
        "id": "c3fa0faa7d5c2091",
        "type": "http in",
        "z": "3528abd37031dabe",
        "name": "GET /message",
        "url": "/message",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 180,
        "wires": [
            [
                "e4dbe67cae96341f"
            ]
        ]
    },
    {
        "id": "ad4f593ea3daf956",
        "type": "http response",
        "z": "3528abd37031dabe",
        "name": "End",
        "statusCode": "",
        "headers": {},
        "x": 1490,
        "y": 180,
        "wires": []
    },
    {
        "id": "306319190119b9b5",
        "type": "catch",
        "z": "3528abd37031dabe",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 980,
        "y": 120,
        "wires": [
            [
                "648684bf24ddc1c9"
            ]
        ]
    },
    {
        "id": "648684bf24ddc1c9",
        "type": "function",
        "z": "3528abd37031dabe",
        "name": "Error Handler",
        "func": "const error = msg.error.message || \"Unknown error\";\nmsg.payload = { error };\nmsg.statusCode = 500;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 120,
        "wires": [
            [
                "e4dbe67cae96341f"
            ]
        ]
    },
    {
        "id": "10c99a8b606998da",
        "type": "function",
        "z": "3528abd37031dabe",
        "g": "fa6f09aee615fd3b",
        "name": "OpenAI Prepare",
        "func": "const serviceConfigs = global.get('serviceConfigs');\nconst cfg = serviceConfigs['openai'] ?? null;\nif (!cfg || !cfg.apiKey) {\n    const text = 'OpenAI API key not found';\n    node.status({ fill: \"red\", shape: \"dot\", text });\n    node.error(text, msg);\n    return null;\n}\n\n// Get user message and system messages\nconst userMessage = msg.enrichedMessage || msg.originalMessage;\nconst systemMessages = msg.systemMessages || [];  // Ensure systemMessages is an array\n\n// Model and other configurations\nconst model = cfg.model ?? \"gpt-4o\";\nconst currentDate = new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });\nconst currentTime = new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });\nconst prompt = `The current date is ${currentDate}. The current time is ${currentTime}. Your task is to chat freely with the user.`;\n\n// Base system prompt\nconst messages = [{ role: \"system\", content: prompt }];\n\n// Add the user message at the end\nmessages.push({ role: \"user\", content: userMessage });\n\n// Append system messages\nsystemMessages.forEach((m) => messages.push({ role: \"system\", content: m}));\n\n// Prepare the OpenAI API request\nmsg.auth = 'Bearer ' + cfg.apiKey;\nmsg.payload = { model, messages };\nnode.status({ fill: \"green\", shape: \"dot\", text: `Send ${messages.length} messages`});\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 260,
        "wires": [
            [
                "0cec7430cfd01dd9"
            ]
        ]
    },
    {
        "id": "0cec7430cfd01dd9",
        "type": "http request",
        "z": "3528abd37031dabe",
        "g": "fa6f09aee615fd3b",
        "name": "OpenAI API Call",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.openai.com/v1/chat/completions",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "auth"
            },
            {
                "keyType": "other",
                "keyValue": "Content-Type",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 1000,
        "y": 260,
        "wires": [
            [
                "a505f83094ce3c39"
            ]
        ]
    },
    {
        "id": "a505f83094ce3c39",
        "type": "function",
        "z": "3528abd37031dabe",
        "g": "fa6f09aee615fd3b",
        "name": "OpenAI Reply",
        "func": "if (msg.statusCode >= 200 && msg.statusCode < 300) {\n    if (msg.payload && msg.payload.choices && msg.payload.choices.length > 0) {\n        const paragraphs = (lines) => {\n            let inList = false;\n            for (let i = 0; i < lines.length; i++) {\n                if (/^\\d+\\.\\s(.*)/.test(lines[i])) {\n                    let listItem = lines[i].replace(/^\\d+\\.\\s(.*)/, '<li>$1</li>');\n                    if (!inList) {\n                        lines[i] = '<ol>\\n' + listItem;\n                        inList = true;\n                    } else {\n                        lines[i] = listItem;\n                    }\n                    if (i + 1 >= lines.length || !/^\\d+\\.\\s(.*)/.test(lines[i + 1])) {\n                        lines[i] += '\\n</ol>';\n                        inList = false;\n                    }\n                } else {\n                    if (lines[i].trim() !== '') {\n                        lines[i] = '<p>' + lines[i] + '</p>';\n                    }\n                }\n            }\n            return lines.join('\\n');\n        };\n        const md2html = (reply) => paragraphs(\n            reply.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n            .replace(/(\\*|_)(.*?)\\1/g, '<em>$2</em>')\n            .replace(/\\[(.*?)\\]\\((.*?)\\)/g, '<a href=\"$2\">$1</a>')\n            .replace(/^# (.*$)/gim, '<h1>$1</h1>')\n            .replace(/^## (.*$)/gim, '<h2>$1</h2>')\n            .replace(/^### (.*$)/gim, '<h3>$1</h3>')\n            .split('\\n'));\n        msg.payload.reply = md2html(msg.payload.choices[0].message.content);\n        node.status({ fill: \"green\", shape: \"dot\", text: `Received ${msg.payload.reply.length} chars`});\n        return msg;\n    } else {\n        const text = \"OpenAI API reply has no choices.\";\n        node.status({fill:\"red\", shape:\"dot\", text});\n        node.error(text, msg);\n        return null;\n    }\n} else {\n    const text = \"OpenAI API call failed.\";\n    if (msg.payload && msg.payload.error && msg.payload.error.message) {\n        node.error(`OpenAI API Error: ${msg.payload.error.message}`, msg);\n    } else if (msg.payload) {\n        node.error(`OpenAI API Error: ${JSON.stringify(msg.payload.error ?? msg.payload)}`, msg);\n    } else {\n        node.error(text, msg);\n    }\n    node.status({fill:\"red\", shape:\"dot\", text });\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 260,
        "wires": [
            [
                "e4dbe67cae96341f"
            ]
        ]
    },
    {
        "id": "6a75df7eed810537",
        "type": "switch",
        "z": "3528abd37031dabe",
        "name": "",
        "property": "url.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lte",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 220,
        "wires": [
            [
                "10c99a8b606998da"
            ],
            [
                "aef32bf013bf4cb1"
            ]
        ]
    },
    {
        "id": "98aa88a133dc42a6",
        "type": "inject",
        "z": "3528abd37031dabe",
        "g": "dc31dea15625e354",
        "name": "Configs",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "de6b8359132db89f"
            ]
        ]
    },
    {
        "id": "de6b8359132db89f",
        "type": "http request",
        "z": "3528abd37031dabe",
        "g": "dc31dea15625e354",
        "name": "Fetch Configs",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://portal.api.octopus-news.com/api/v1/services/ai/providers/octopus-news",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 300,
        "y": 80,
        "wires": [
            [
                "2bb18d73461d5ca0"
            ]
        ]
    },
    {
        "id": "2bb18d73461d5ca0",
        "type": "function",
        "z": "3528abd37031dabe",
        "g": "dc31dea15625e354",
        "name": "Save Configs",
        "func": "const configByKey = {}; // Init the storage\nif (msg.payload && msg.payload.enabled && Array.isArray(msg.payload.enabled)) {\n    const enabledConfigs = msg.payload.enabled;\n    enabledConfigs.forEach(item => {\n            if(item.key && item.config) {\n                configByKey[item.key] = item.config;\n            }\n        });\n    // Save configs in global context\n    global.set('serviceConfigs', configByKey);\n    node.status({ fill: \"green\", shape: \"dot\", text: Object.keys(configByKey).length + ' configs stored.' });\n} else {\n    node.error(\"Cannot get services configuratoions\", msg);\n    node.status({fill:\"red\",shape:\"ring\",text:\"Failed to get configs\"});\n}\nreturn configByKey;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "aef32bf013bf4cb1",
        "type": "split",
        "z": "3528abd37031dabe",
        "g": "3e266a338db4a3bd",
        "name": "Split URLs",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "url",
        "x": 570,
        "y": 420,
        "wires": [
            [
                "65efc2c706921399"
            ]
        ]
    },
    {
        "id": "65efc2c706921399",
        "type": "http request",
        "z": "3528abd37031dabe",
        "g": "3e266a338db4a3bd",
        "name": "Fetch URL",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 420,
        "wires": [
            [
                "f8e936c96b175f20"
            ]
        ]
    },
    {
        "id": "f8e936c96b175f20",
        "type": "function",
        "z": "3528abd37031dabe",
        "g": "3e266a338db4a3bd",
        "name": "Parse HTML",
        "func": "const html = msg.payload;  // The HTML content\nmsg.url = {\n    link: msg.url, \n    title: (html.match(/<title>(.*?)<\\/title>/) || [])[1] || \"No title found\", \n    description: (html.match(/ name=\"description\" content=\"(.*?)\"/) || [])[1] || \"No description found\",\n    h1: (html.match(/<h1>(.*?)<\\/h1>/) || [])[1] || \"\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 420,
        "wires": [
            [
                "382027805d06f27f"
            ]
        ]
    },
    {
        "id": "382027805d06f27f",
        "type": "join",
        "z": "3528abd37031dabe",
        "g": "3e266a338db4a3bd",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "useparts": false,
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1030,
        "y": 420,
        "wires": [
            [
                "5840f84bf46885cd"
            ]
        ]
    },
    {
        "id": "5840f84bf46885cd",
        "type": "function",
        "z": "3528abd37031dabe",
        "g": "3e266a338db4a3bd",
        "name": "Sys Messages",
        "func": "msg.systemMessages = msg.url.map((u) => `URL: ${u.link}\\nTitle: ${u.title}\\nDescription: ${u.description}\\n${u.h1 ? 'Header:'+u.h1 : ''}`);\ndelete(msg.payload);\ndelete(msg.url);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 420,
        "wires": [
            [
                "10c99a8b606998da"
            ]
        ]
    },
    {
        "id": "e4dbe67cae96341f",
        "type": "template",
        "z": "3528abd37031dabe",
        "name": "UI form",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Start page</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 20px;\n        }\n        .container {\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        }\n        textarea {\n            width: calc(100% - 20px);\n            padding: 10px;\n            border-radius: 4px;\n            border: 1px solid #ccc;\n            font-size: 16px;\n            resize: none;\n        }\n        input[type=\"submit\"] {\n            background-color: #4CAF50;\n            color: white;\n            padding: 8px 16px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 16px;\n        }\n        input[type=\"submit\"]:hover {\n            background-color: #45a049;\n        }\n        .error {\n            color: red;\n            margin-bottom: 10px;\n        }\n        .reply {\n            color: DarkGreen;\n            margin-bottom: 10px;\n        }\n    </style>\n</head>\n\n<body>\n    {{#payload.error}}\n    <div class=\"error\">\n        {{payload.error}}\n    </div>\n    {{/payload.error}}\n    {{#payload.reply}}\n    <div class=\"reply\">\n        {{{payload.reply}}}\n    </div>\n    {{/payload.reply}}\n    <div class=\"container\">\n        <form id=\"messageForm\" action=\"/message\" method=\"POST\">\n            <textarea id=\"messageInput\" name=\"message\" rows=\"5\" placeholder=\"Type here, Ctrl + Enter to send\"></textarea>\n            <br/>\n            <input type=\"submit\" value=\"Send\">\n        </form>\n    </div>\n</body>\n<script>\nconst input = document.getElementById('messageInput');\nconst handler = (event) => {\n    if (event.ctrlKey && event.key === 'Enter') {\n        event.preventDefault(); // Prevent the default new line\n        document.getElementById('messageForm').submit(); // Submit the form\n    }\n}\ninput.addEventListener('keydown', handler);\ninput.focus();\n</script>\n</html>",
        "output": "str",
        "x": 1360,
        "y": 180,
        "wires": [
            [
                "ad4f593ea3daf956"
            ]
        ]
    }
]