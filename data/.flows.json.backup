[
    {
        "id": "3528abd37031dabe",
        "type": "tab",
        "label": "Main Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "84112de77a7d8a12",
        "type": "http in",
        "z": "3528abd37031dabe",
        "name": "User Input",
        "url": "/message",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 80,
        "y": 220,
        "wires": [
            [
                "3b75e51efa374e0d"
            ]
        ]
    },
    {
        "id": "3b75e51efa374e0d",
        "type": "json",
        "z": "3528abd37031dabe",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 210,
        "y": 220,
        "wires": [
            [
                "1ccc025305d0fcfe"
            ]
        ]
    },
    {
        "id": "1ccc025305d0fcfe",
        "type": "function",
        "z": "3528abd37031dabe",
        "name": "Check Message",
        "func": "\nif (msg.req && msg.req.body && msg.req.body.message) {\n  node.status({ fill: \"green\", shape: \"dot\", text: 'Message received'});\n  msg.originalMessage = msg.req.body.message;\n  msg.payload = { reply: \"Message received: \" + msg.originalMessage };\n} else {\n  const text = \"Empty request received\";\n  node.status({ fill: \"red\", shape: \"dot\", text });\n  node.error(text, msg);\n  return null;\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 220,
        "wires": [
            [
                "10c99a8b606998da"
            ]
        ]
    },
    {
        "id": "a816a2c6bd12d348",
        "type": "function",
        "z": "3528abd37031dabe",
        "name": "Detect YouTube",
        "func": "const regex = /(https?:\\/\\/(?:www\\.)?(youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([\\w-]{11}))/g;\nlet message = msg.originalMessage, matches = [], match;\nwhile ((match = regex.exec(message)) !== null) {\n  matches.push(match[3]); // YouTube video Id\n}\nmsg.videoIds = matches;\nnode.status({ fill: \"green\", shape: \"dot\", text: matches.length + ' links found.' });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "37ae9efc5c549ebc",
        "type": "switch",
        "z": "3528abd37031dabe",
        "name": "",
        "property": "videoIds.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 650,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "98aa88a133dc42a6",
        "type": "inject",
        "z": "3528abd37031dabe",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 100,
        "wires": [
            [
                "de6b8359132db89f"
            ]
        ]
    },
    {
        "id": "de6b8359132db89f",
        "type": "http request",
        "z": "3528abd37031dabe",
        "name": "Get Configs",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://portal.api.octopus-news.com/api/v1/services/ai/providers/octopus-news",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 230,
        "y": 100,
        "wires": [
            [
                "2bb18d73461d5ca0"
            ]
        ]
    },
    {
        "id": "2bb18d73461d5ca0",
        "type": "function",
        "z": "3528abd37031dabe",
        "name": "Save Configs",
        "func": "const configByKey = {}; // Init the storage\nif (msg.payload && msg.payload.enabled && Array.isArray(msg.payload.enabled)) {\n    const enabledConfigs = msg.payload.enabled;\n    enabledConfigs.forEach(item => {\n            if(item.key && item.config) {\n                configByKey[item.key] = item.config;\n            }\n        });\n    // Save configs in global context\n    global.set('serviceConfigs', configByKey);\n    node.status({ fill: \"green\", shape: \"dot\", text: Object.keys(configByKey).length + ' configs stored.' });\n} else {\n    node.error(\"Cannot get services configuratoions\", msg);\n    node.status({fill:\"red\",shape:\"ring\",text:\"Failed to get configs\"});\n}\nreturn configByKey;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 100,
        "wires": [
            [
                "c027a6f358b0d719",
                "2d1c653e58cf2d42"
            ]
        ]
    },
    {
        "id": "c027a6f358b0d719",
        "type": "function",
        "z": "3528abd37031dabe",
        "name": "Check OpenAI",
        "func": "const serviceConfigs = global.get('serviceConfigs'), key = 'openai';\nconst cfg = serviceConfigs[key] ?? null;\nif (cfg && cfg.apiKey && cfg.apiKey.length > 8) {\n    node.status({fill:\"green\", shape:\"dot\", text:`${key} API: OK`});\n} else {\n    node.status({fill:\"red\",shape:\"dot\",text:`${key} API: Failed`});\n}\nreturn cfg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "2d1c653e58cf2d42",
        "type": "function",
        "z": "3528abd37031dabe",
        "name": "Check Google Cloud",
        "func": "const serviceConfigs = global.get('serviceConfigs'), key = 'google-cloud';\nconst cfg = serviceConfigs[key] ?? null;\nif (cfg && cfg.credentials && cfg.credentials.length > 8) {\n    node.status({fill:\"green\", shape:\"dot\", text:`${key} API: OK`});\n} else {\n    node.status({fill:\"red\",shape:\"dot\",text:`${key} API: Failed`});\n}\nreturn cfg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "c3fa0faa7d5c2091",
        "type": "http in",
        "z": "3528abd37031dabe",
        "name": "User Form",
        "url": "/message",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1140,
        "y": 80,
        "wires": [
            [
                "e4dbe67cae96341f"
            ]
        ]
    },
    {
        "id": "e4dbe67cae96341f",
        "type": "template",
        "z": "3528abd37031dabe",
        "name": "UI form",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Start page</title>\n</head>\n<body>\n    {{#payload.error}}\n        <div style=\"color:red;\">\n            {{payload.error}}\n        </div>\n    {{/payload.error}}\n    {{#payload.reply}}\n    <div style=\"color:green;\">\n        {{payload.reply}}\n    </div>\n    {{/payload.reply}}\n        <form action=\"/message\" method=\"POST\">\n        <textarea name=\"message\" rows=\"5\" cols=\"50\" placeholder=\"What would you like to ask?\"></textarea>\n        <br/>\n        <input type=\"submit\" value=\"Send\">\n    </form>\n</body>\n</html>",
        "output": "str",
        "x": 1320,
        "y": 140,
        "wires": [
            [
                "ad4f593ea3daf956"
            ]
        ]
    },
    {
        "id": "ad4f593ea3daf956",
        "type": "http response",
        "z": "3528abd37031dabe",
        "name": "End",
        "statusCode": "",
        "headers": {},
        "x": 1470,
        "y": 140,
        "wires": []
    },
    {
        "id": "306319190119b9b5",
        "type": "catch",
        "z": "3528abd37031dabe",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 940,
        "y": 120,
        "wires": [
            [
                "648684bf24ddc1c9"
            ]
        ]
    },
    {
        "id": "648684bf24ddc1c9",
        "type": "function",
        "z": "3528abd37031dabe",
        "name": "Error Handler",
        "func": "const error = msg.error.message || \"Unknown error\";\nmsg.payload = { error };\nmsg.statusCode = 500;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1120,
        "y": 120,
        "wires": [
            [
                "e4dbe67cae96341f"
            ]
        ]
    },
    {
        "id": "ef19ff9914385c88",
        "type": "debug",
        "z": "3528abd37031dabe",
        "name": "debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 260,
        "wires": []
    },
    {
        "id": "10c99a8b606998da",
        "type": "function",
        "z": "3528abd37031dabe",
        "name": "Prompt prepare",
        "func": "const serviceConfigs = global.get('serviceConfigs');\nconst cfg = serviceConfigs['openai'] ?? null;\nif (!cfg || !cfg.apiKey) {\n    const text = 'OpenAI API key not found';\n    node.status({ fill: \"red\", shape: \"dot\", text });\n    node.error(text, msg);\n    return null;\n}\nconst Bearer = 'Bearer ' + cfg.apiKey;\nconst userMessage = msg.enrichedMessage || msg.originalMessage;\n      const currentDate = new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });\n      const currentTime = new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });\n      const prompt = `The current date is ${currentDate}. The current time is ${currentTime}. Your task is to chat freely with the user.`;\n\nmsg.payload = {\n    model: cfg.model ?? \"gpt-4\",\n    messages: [\n        { role: \"system\", content: prompt },\n        { role: \"user\", content: userMessage }\n    ],\n    Bearer\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 320,
        "wires": [
            [
                "0cec7430cfd01dd9",
                "ef19ff9914385c88"
            ]
        ]
    },
    {
        "id": "0cec7430cfd01dd9",
        "type": "http request",
        "z": "3528abd37031dabe",
        "name": "OpenAI API Call",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.openai.com/v1/chat/completions",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [
            {
                "keyType": "other",
                "keyValue": "Authorization",
                "valueType": "msg",
                "valueValue": "Bearer"
            },
            {
                "keyType": "other",
                "keyValue": "Content-Type",
                "valueType": "other",
                "valueValue": "application/json"
            }
        ],
        "x": 780,
        "y": 320,
        "wires": [
            [
                "a505f83094ce3c39",
                "ef19ff9914385c88"
            ]
        ]
    },
    {
        "id": "a505f83094ce3c39",
        "type": "function",
        "z": "3528abd37031dabe",
        "name": "OpenAI Reply",
        "func": "if (msg.payload && msg.payload.choices && msg.payload.choices.length > 0) {\n    const reply = msg.payload.choices[0].message.content;\n    msg.payload = { reply };\n    node.status({fill:\"green\", shape:\"dot\", text:`Received ${reply.length} chars`});\n    return msg;\n} else {\n    const text = \"Bad Reply from OpenAI API\";\n    node.status({fill:\"red\", shape:\"dot\", text});\n    node.error(text, msg);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 320,
        "wires": [
            [
                "e4dbe67cae96341f"
            ]
        ]
    }
]