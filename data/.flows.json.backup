[
    {
        "id": "3528abd37031dabe",
        "type": "tab",
        "label": "Main Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "84112de77a7d8a12",
        "type": "http in",
        "z": "3528abd37031dabe",
        "name": "User Input",
        "url": "/message",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 100,
        "y": 400,
        "wires": [
            [
                "3b75e51efa374e0d"
            ]
        ]
    },
    {
        "id": "3b75e51efa374e0d",
        "type": "json",
        "z": "3528abd37031dabe",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 230,
        "y": 400,
        "wires": [
            [
                "1ccc025305d0fcfe"
            ]
        ]
    },
    {
        "id": "1ccc025305d0fcfe",
        "type": "function",
        "z": "3528abd37031dabe",
        "name": "Prepare Message",
        "func": "console.log(msg);\n\nlet message = msg.payload.message;\nif (!message) {\n  node.status({ fill: \"red\", shape: \"dot\", text: 'No message received' });\n  return null; // Stop if empty\n}\nmsg.originalMessage = message;\nnode.status({ fill: \"green\", shape: \"dot\", text: 'Message received:'+message });\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 400,
        "wires": [
            [
                "a816a2c6bd12d348"
            ]
        ]
    },
    {
        "id": "a816a2c6bd12d348",
        "type": "function",
        "z": "3528abd37031dabe",
        "name": "YouTube Links Detect",
        "func": "const regex = /(https?:\\/\\/(?:www\\.)?(youtube\\.com\\/watch\\?v=|youtu\\.be\\/)([\\w-]{11}))/g;\nlet message = msg.originalMessage, matches = [], match;\nwhile ((match = regex.exec(message)) !== null) {\n  matches.push(match[3]); // YouTube video Id\n}\nmsg.videoIds = matches;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 400,
        "wires": [
            [
                "37ae9efc5c549ebc"
            ]
        ]
    },
    {
        "id": "37ae9efc5c549ebc",
        "type": "switch",
        "z": "3528abd37031dabe",
        "name": "",
        "property": "videoIds.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 810,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "98aa88a133dc42a6",
        "type": "inject",
        "z": "3528abd37031dabe",
        "name": "On Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 100,
        "wires": [
            [
                "de6b8359132db89f"
            ]
        ]
    },
    {
        "id": "de6b8359132db89f",
        "type": "http request",
        "z": "3528abd37031dabe",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://portal.api.octopus-news.com/api/v1/services/ai/providers/octopus-news",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 250,
        "y": 100,
        "wires": [
            [
                "2bb18d73461d5ca0"
            ]
        ]
    },
    {
        "id": "2bb18d73461d5ca0",
        "type": "function",
        "z": "3528abd37031dabe",
        "name": "Save Configs",
        "func": "const configByKey = {}; // Init the storage\nif (msg.payload && msg.payload.enabled && Array.isArray(msg.payload.enabled)) {\n    const enabledConfigs = msg.payload.enabled;\n    enabledConfigs.forEach(item => {\n            if(item.key && item.config) {\n                configByKey[item.key] = item.config;\n            }\n        });\n    // Save configs in global context\n    global.set('serviceConfigs', configByKey);\n    node.status({ fill: \"green\", shape: \"dot\", text: Object.keys(configByKey).length + ' configs stored.' });\n} else {\n    node.error(\"Cannot get services configuratoions\", msg);\n    node.status({fill:\"red\",shape:\"ring\",text:\"Failed to get configs\"});\n}\nreturn configByKey;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 100,
        "wires": [
            [
                "c027a6f358b0d719",
                "2d1c653e58cf2d42"
            ]
        ]
    },
    {
        "id": "c027a6f358b0d719",
        "type": "function",
        "z": "3528abd37031dabe",
        "name": "Check OpenAI API",
        "func": "const serviceConfigs = global.get('serviceConfigs');\nconst cfg = serviceConfigs['openai'] ?? null;\nif (cfg && cfg.apiKey && cfg.apiKey.length > 8) {\n    node.status({fill:\"green\",shape:\"dot\",text:\"OpenAI API: OK\"});\n} else {\n    node.status({fill:\"red\",shape:\"dot\",text:\"OpenAI API: Failed\"});\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "2d1c653e58cf2d42",
        "type": "function",
        "z": "3528abd37031dabe",
        "name": "Check Google Cloud API",
        "func": "const serviceConfigs = global.get('serviceConfigs');\nconst cfg = serviceConfigs['google-cloud'] ?? null;\nif (cfg && cfg.credentials && cfg.credentials.length > 8) {\n    node.status({fill:\"green\", shape:\"dot\", text:\"Google Cloud API: OK\"});\n} else {\n    node.status({fill:\"red\",shape:\"dot\",text:\"Google Cloud API: Failed\"});\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "c3fa0faa7d5c2091",
        "type": "http in",
        "z": "3528abd37031dabe",
        "name": "Get Form",
        "url": "/message",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 220,
        "wires": [
            [
                "e4dbe67cae96341f"
            ]
        ]
    },
    {
        "id": "e4dbe67cae96341f",
        "type": "template",
        "z": "3528abd37031dabe",
        "name": "HTML form",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "plain",
        "template": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Message sending</title>\n</head>\n\n<body>\n    <h1>Input your message</h1>\n    <form action=\"/message\" method=\"POST\">\n        <textarea name=\"message\" rows=\"5\" cols=\"50\" placeholder=\"Input your message\"></textarea><br>\n        <input type=\"submit\" value=\"Send\">\n    </form>\n</body>\n</html>",
        "output": "str",
        "x": 270,
        "y": 220,
        "wires": [
            [
                "ad4f593ea3daf956"
            ]
        ]
    },
    {
        "id": "ad4f593ea3daf956",
        "type": "http response",
        "z": "3528abd37031dabe",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 450,
        "y": 220,
        "wires": []
    }
]